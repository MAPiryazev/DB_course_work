import pandas as pd
import streamlit as st
import time
import services.user
import services.orders
import logging

logger = logging.getLogger(__name__)

def show_profile_page():
    st.title("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")

    user_data = st.session_state.get("user", {"email": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "balance": 0.0})

    email = user_data['email']
    email = email.iloc[0]
    user_balance = services.user.get_user_balance(email)

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("### üìß –ü–æ—á—Ç–∞")
        st.write(f"**{email}**")
    with col2:
        st.markdown("### üí∞ –ë–∞–ª–∞–Ω—Å")
        st.write(f"**{user_balance:,.2f} —Ä—É–±.**")

    st.divider()
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        time.sleep(0.5)
        st.rerun()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'show_balance_input' not in st.session_state:
        st.session_state['show_balance_input'] = False
    if 'new_balance' not in st.session_state:
        st.session_state['new_balance'] = 0.0

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–æ—Å–∫–∏
    if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
        st.session_state['show_balance_input'] = True

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω
    if st.session_state['show_balance_input']:
        new_balance = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", min_value=0.0, step=0.01)
        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
            try:
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                services.user.set_user_balance(email, user_balance + new_balance)
                st.success(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {new_balance:,.2f} —Ä—É–±.")
                time.sleep(0.5)
                st.session_state['show_balance_input'] = False
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å –∑–∞–∫–∞–∑–∞–º–∏
    st.divider()
    st.markdown("### üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = services.user.get_user(email)
        if user_info.empty:
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        user_id = int(user_info['user_id'].iloc[0])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders_df = services.orders.get_user_orders(user_id)
        
        if orders_df.empty:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
            for index, order in orders_df.iterrows():
                with st.expander(f"–ó–∞–∫–∞–∑ #{order['order_id']} - {order['status']}"):
                    st.write(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['order_date']}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                    status_colors = {
                        "Pending": "üü° –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                        "Processing": "üü° –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                        "Confirmed": "üîµ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                        "Shipped": "üü¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                        "Delivered": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω",
                        "Cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
                    }
                    status_display = status_colors.get(order['status'], f"‚ö™ {order['status']}")
                    st.write(f"–°—Ç–∞—Ç—É—Å: {status_display}")
                    
    except Exception as e:
        logger.error(f"Error loading orders: {e}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")